{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = desisgnSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      enableColorScheme = designSystemEnableColorScheme,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n    } = _ref;\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    let theme = restThemeProp;\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(theme, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    modeStorageKey: defaultModeStorageKey,\n    enableColorScheme: designSystemEnableColorScheme\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/Users/hackinghunter/Desktop/1.maxlence react js/M/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","desisgnSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","enableColorScheme","designSystemEnableColorScheme","shouldSkipGeneratingVar","designSystemShouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","resolvedColorScheme","css","rootCss","vars","rootVars","parsedTheme","prefix","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    let theme = restThemeProp;\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(theme, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    modeStorageKey: defaultModeStorageKey,\n    enableColorScheme: designSystemEnableColorScheme\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}