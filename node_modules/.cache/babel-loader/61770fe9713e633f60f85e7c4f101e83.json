{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport experimental_extendTheme from './experimental_extendTheme';\nimport createTypography from './createTypography';\nimport excludeVariablesFromRoot from './excludeVariablesFromRoot';\n\nconst shouldSkipGeneratingVar = keys => {\n  var _keys$;\n\n  return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));\n};\n\nconst defaultTheme = experimental_extendTheme();\nconst {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript\n} = createCssVarsProvider({\n  theme: defaultTheme,\n  attribute: 'data-mui-color-scheme',\n  modeStorageKey: 'mui-mode',\n  colorSchemeStorageKey: 'mui-color-scheme',\n  defaultColorScheme: {\n    light: 'light',\n    dark: 'dark'\n  },\n  resolveTheme: theme => {\n    const newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n\n    return newTheme;\n  },\n  shouldSkipGeneratingVar,\n  excludeVariablesFromRoot\n});\nexport { useColorScheme, getInitColorSchemeScript, shouldSkipGeneratingVar, CssVarsProvider as Experimental_CssVarsProvider };","map":{"version":3,"sources":["C:/Users/Toshiba/Desktop/Maxlence Projects/MaxmoverOfficial/MaxMover/node_modules/@mui/material/esm/styles/CssVarsProvider.js"],"names":["_extends","unstable_createCssVarsProvider","createCssVarsProvider","experimental_extendTheme","createTypography","excludeVariablesFromRoot","shouldSkipGeneratingVar","keys","_keys$","match","defaultTheme","CssVarsProvider","useColorScheme","getInitColorSchemeScript","theme","attribute","modeStorageKey","colorSchemeStorageKey","defaultColorScheme","light","dark","resolveTheme","newTheme","typography","palette","Experimental_CssVarsProvider"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,8BAA8B,IAAIC,qBAA3C,QAAwE,aAAxE;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;;AAEA,MAAMC,uBAAuB,GAAGC,IAAI,IAAI;AACtC,MAAIC,MAAJ;;AAEA,SAAO,CAAC,CAACD,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAc,uDAAd,CAAF,IAA4EF,IAAI,CAAC,CAAD,CAAJ,KAAY,SAAZ,IAAyB,CAAC,EAAE,CAACC,MAAM,GAAGD,IAAI,CAAC,CAAD,CAAd,KAAsB,IAAtB,IAA8BC,MAAM,CAACC,KAAP,CAAa,sCAAb,CAAhC,CAA7G;AACD,CAJD;;AAMA,MAAMC,YAAY,GAAGP,wBAAwB,EAA7C;AACA,MAAM;AACJQ,EAAAA,eADI;AAEJC,EAAAA,cAFI;AAGJC,EAAAA;AAHI,IAIFX,qBAAqB,CAAC;AACxBY,EAAAA,KAAK,EAAEJ,YADiB;AAExBK,EAAAA,SAAS,EAAE,uBAFa;AAGxBC,EAAAA,cAAc,EAAE,UAHQ;AAIxBC,EAAAA,qBAAqB,EAAE,kBAJC;AAKxBC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,KAAK,EAAE,OADW;AAElBC,IAAAA,IAAI,EAAE;AAFY,GALI;AASxBC,EAAAA,YAAY,EAAEP,KAAK,IAAI;AACrB,UAAMQ,QAAQ,GAAGtB,QAAQ,CAAC,EAAD,EAAKc,KAAL,EAAY;AACnCS,MAAAA,UAAU,EAAEnB,gBAAgB,CAACU,KAAK,CAACU,OAAP,EAAgBV,KAAK,CAACS,UAAtB;AADO,KAAZ,CAAzB;;AAIA,WAAOD,QAAP;AACD,GAfuB;AAgBxBhB,EAAAA,uBAhBwB;AAiBxBD,EAAAA;AAjBwB,CAAD,CAJzB;AAuBA,SAASO,cAAT,EAAyBC,wBAAzB,EAAmDP,uBAAnD,EAA4EK,eAAe,IAAIc,4BAA/F","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\r\nimport experimental_extendTheme from './experimental_extendTheme';\r\nimport createTypography from './createTypography';\r\nimport excludeVariablesFromRoot from './excludeVariablesFromRoot';\r\n\r\nconst shouldSkipGeneratingVar = keys => {\r\n  var _keys$;\r\n\r\n  return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));\r\n};\r\n\r\nconst defaultTheme = experimental_extendTheme();\r\nconst {\r\n  CssVarsProvider,\r\n  useColorScheme,\r\n  getInitColorSchemeScript\r\n} = createCssVarsProvider({\r\n  theme: defaultTheme,\r\n  attribute: 'data-mui-color-scheme',\r\n  modeStorageKey: 'mui-mode',\r\n  colorSchemeStorageKey: 'mui-color-scheme',\r\n  defaultColorScheme: {\r\n    light: 'light',\r\n    dark: 'dark'\r\n  },\r\n  resolveTheme: theme => {\r\n    const newTheme = _extends({}, theme, {\r\n      typography: createTypography(theme.palette, theme.typography)\r\n    });\r\n\r\n    return newTheme;\r\n  },\r\n  shouldSkipGeneratingVar,\r\n  excludeVariablesFromRoot\r\n});\r\nexport { useColorScheme, getInitColorSchemeScript, shouldSkipGeneratingVar, CssVarsProvider as Experimental_CssVarsProvider };"]},"metadata":{},"sourceType":"module"}