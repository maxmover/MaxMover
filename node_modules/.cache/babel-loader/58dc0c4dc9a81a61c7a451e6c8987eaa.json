{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // import { CalendarPickerView } from '../internals/models';\n\nconst trTRPickers = {\n  // Calendar navigation\n  previousMonth: 'Önceki ay',\n  nextMonth: 'Sonraki ay',\n  // View navigation\n  openPreviousView: 'sonraki görünüm',\n  openNextView: 'önceki görünüm',\n  // calendarViewSwitchingButtonAriaLabel: (view: CalendarPickerView) => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Başlangıç',\n  end: 'Bitiş',\n  // Action bar\n  cancelButtonLabel: 'iptal',\n  clearButtonLabel: 'Temizle',\n  okButtonLabel: 'Tamam',\n  todayButtonLabel: 'Bugün' // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  // clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,\n  // hoursClockNumberText: hours => `${hours} hours`,\n  // minutesClockNumberText: minutes => `${minutes} minutes`,\n  // secondsClockNumberText: seconds => `${seconds} seconds`,\n  // Open picker labels\n  // openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue)!, 'fullDate')}` : 'Choose date',\n  // openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue)!, 'fullTime')}` : 'Choose time',\n  // Table labels\n  // timeTableLabel: 'pick time',\n  // dateTableLabel: 'pick date',\n\n};\nexport const trTR = getPickersLocalization(trTRPickers);","map":{"version":3,"sources":["C:/Users/Toshiba/Desktop/Maxlence Projects/MaxmoverOfficial/MaxMover/node_modules/@mui/x-date-pickers/locales/trTR.js"],"names":["getPickersLocalization","trTRPickers","previousMonth","nextMonth","openPreviousView","openNextView","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","trTR"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC,C,CAAyE;;AAEzE,MAAMC,WAAW,GAAG;AAClB;AACAC,EAAAA,aAAa,EAAE,WAFG;AAGlBC,EAAAA,SAAS,EAAE,YAHO;AAIlB;AACAC,EAAAA,gBAAgB,EAAE,iBALA;AAMlBC,EAAAA,YAAY,EAAE,gBANI;AAOlB;AACA;AACA;AACAC,EAAAA,KAAK,EAAE,WAVW;AAWlBC,EAAAA,GAAG,EAAE,OAXa;AAYlB;AACAC,EAAAA,iBAAiB,EAAE,OAbD;AAclBC,EAAAA,gBAAgB,EAAE,SAdA;AAelBC,EAAAA,aAAa,EAAE,OAfG;AAgBlBC,EAAAA,gBAAgB,EAAE,OAhBA,CAgBQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/BkB,CAApB;AAkCA,OAAO,MAAMC,IAAI,GAAGZ,sBAAsB,CAACC,WAAD,CAAnC","sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization'; // import { CalendarPickerView } from '../internals/models';\r\n\r\nconst trTRPickers = {\r\n  // Calendar navigation\r\n  previousMonth: 'Önceki ay',\r\n  nextMonth: 'Sonraki ay',\r\n  // View navigation\r\n  openPreviousView: 'sonraki görünüm',\r\n  openNextView: 'önceki görünüm',\r\n  // calendarViewSwitchingButtonAriaLabel: (view: CalendarPickerView) => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',\r\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\r\n  // DateRange placeholders\r\n  start: 'Başlangıç',\r\n  end: 'Bitiş',\r\n  // Action bar\r\n  cancelButtonLabel: 'iptal',\r\n  clearButtonLabel: 'Temizle',\r\n  okButtonLabel: 'Tamam',\r\n  todayButtonLabel: 'Bugün' // Toolbar titles\r\n  // datePickerDefaultToolbarTitle: 'Select date',\r\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\r\n  // timePickerDefaultToolbarTitle: 'Select time',\r\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\r\n  // Clock labels\r\n  // clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,\r\n  // hoursClockNumberText: hours => `${hours} hours`,\r\n  // minutesClockNumberText: minutes => `${minutes} minutes`,\r\n  // secondsClockNumberText: seconds => `${seconds} seconds`,\r\n  // Open picker labels\r\n  // openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue)!, 'fullDate')}` : 'Choose date',\r\n  // openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue)!, 'fullTime')}` : 'Choose time',\r\n  // Table labels\r\n  // timeTableLabel: 'pick time',\r\n  // dateTableLabel: 'pick date',\r\n\r\n};\r\nexport const trTR = getPickersLocalization(trTRPickers);"]},"metadata":{},"sourceType":"module"}